name: Publish Docker latest image
on:
  push:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build with Maven
        run: mvn -B verify
      - name: Extract jar for layered image building
        run: java -Djarmode=layertools -jar target/fredbet.jar extract
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: app-binary
          path: |
            dependencies/
            spring-boot-loader/
            snapshot-dependencies/
            application/
          retention-days: 5
#  build_push_ghcr_amd64:
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v3
#      - name: Set up JDK 17 for deploy to GitHub Container Registry
#        uses: actions/setup-java@v2
#        with:
#          distribution: 'adopt'
#          java-version: '17'
#          server-id: ghcr.io
#      - name: Cache local Maven repository
#        uses: actions/cache@v2
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-maven-
#      - name: Publish to GitHub Container Registry
#        run: mvn -B compile jib:build -Dmaven.test.skip=true -Dimage=ghcr.io/fred4jupiter/fredbet:latest
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build_push_buildx:
    runs-on: ubuntu-latest
    needs: build
    env:
      DOCKER_IMAGE: fred4jupiter/fredbet
      DOCKER_TARGET_PLATFORM: linux/arm64/v8,linux/amd64
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: app-binary
      - name: Create missing directories
        run: mkdir -p snapshot-dependencies
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Prepare
        if: success()
        id: prepare
        run: |
          echo ::set-output name=docker_platform::${DOCKER_TARGET_PLATFORM}
          echo ::set-output name=docker_hub_image_name::docker.io/${DOCKER_IMAGE}
          echo ::set-output name=ghcr_image_name::ghcr.io/${DOCKER_IMAGE}
          echo ::set-output name=version::latest
      - name: Login to Docker Hub
        if: success()
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Login to GitHub Container Registry
        if: success()
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push image
        if: success()
        run: |
          docker buildx build \
            --platform ${{ steps.prepare.outputs.docker_platform }} \
            --tag ${{ steps.prepare.outputs.docker_hub_image_name }}:${{ steps.prepare.outputs.version }} \
            --tag ${{ steps.prepare.outputs.ghcr_image_name }}:${{ steps.prepare.outputs.version }} \
            --file ./Dockerfile-simple-layered \
            --output type=image,push=true .