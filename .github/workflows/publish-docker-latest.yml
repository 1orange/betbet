name: Publish Docker latest image
on:
  push:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build with Maven
        run: mvn -B verify
  build_push_ghcr_amd64:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
      - name: Set up JDK 17 for deploy to GitHub Container Registry
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'
          server-id: ghcr.io
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Publish to GitHub Container Registry
        run: mvn -B compile jib:build -Dimage=ghcr.io/fred4jupiter/fredbet:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build_push_docker_hub_buildx:
    runs-on: ubuntu-latest
    needs: build
    env:
      DOCKER_REGISTRY: docker.io
      DOCKER_IMAGE: fred4jupiter/fredbet
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}
      DOCKER_TARGET_PLATFORM: linux/arm64/v8,linux/amd64
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Prepare
        if: success()
        id: prepare
        run: |
          echo ::set-output name=docker_platform::${DOCKER_TARGET_PLATFORM}
          echo ::set-output name=docker_image::${DOCKER_REGISTRY}/${DOCKER_IMAGE}
          echo ::set-output name=version::latest
      - name: Docker Login
        if: success()
        run: |
          echo "${DOCKER_PASSWORD}" | docker login ${DOCKER_REGISTRY} --username "${DOCKER_USERNAME}" --password-stdin
      - name: Build image with buildx
        if: success()
        run: |
          docker buildx build \
            --platform ${{ steps.prepare.outputs.docker_platform }} \
            --tag ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }} \
            --file ./Dockerfile-buildx \
            --output type=image,push=true .