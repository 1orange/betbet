name: Publish Release

on: workflow_dispatch # only manual trigger for release creation is allowed

jobs:
  build_tag_repo:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{steps.version_update.outputs.release-version}} # use in jobs: ${{needs.build_tag_repo.outputs.release_version}}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build with Maven
        run: mvn -B verify
      - name: Update to release version and tag
        id: version_update
        uses: fred4jupiter/maven-version-update-action@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Print release version
        run: "echo 'New release Version: ${{steps.version_update.outputs.release-version}}'"
  build_push_buildx:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: build_tag_repo
    env:
      DOCKER_IMAGE: fred4jupiter/fredbet
      DOCKER_TARGET_PLATFORM: linux/arm64/v8,linux/amd64
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        with:
          ref: ${{needs.build_tag_repo.outputs.release_version}}
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build with Maven
        run: mvn -B -DskipTests verify
      - name: Extract jar for layered image building
        run: java -Djarmode=layertools -jar target/fredbet.jar extract
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Prepare
        if: success()
        id: prepare
        run: |
          echo ::set-output name=docker_platform::${DOCKER_TARGET_PLATFORM}
          echo ::set-output name=docker_hub_image_name::docker.io/${DOCKER_IMAGE}
          echo ::set-output name=ghcr_image_name::ghcr.io/${DOCKER_IMAGE}
          echo ::set-output name=version::${{needs.build_tag_repo.outputs.release_version}}
      - name: Login to Docker Hub
        if: success()
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Login to GitHub Container Registry
        if: success()
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push image
        if: success()
        run: |
          docker buildx build \
            --platform ${{ steps.prepare.outputs.docker_platform }} \
            --tag ${{ steps.prepare.outputs.docker_hub_image_name }}:${{ steps.prepare.outputs.version }} \
            --tag ${{ steps.prepare.outputs.ghcr_image_name }}:${{ steps.prepare.outputs.version }} \
            --file ./Dockerfile-simple-layered \
            --output type=image,push=true .
  create_release:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: build_tag_repo
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{needs.build_tag_repo.outputs.release_version}}
      - name: Build Changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{needs.build_tag_repo.outputs.release_version}}
          release_name: Release ${{needs.build_tag_repo.outputs.release_version}}
          draft: false
          prerelease: false
#          body: ${{steps.github_release.outputs.changelog}}